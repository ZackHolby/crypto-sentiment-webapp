// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace crypto_sentiment.Pages
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using crypto_sentiment;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using crypto_sentiment.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using MoreLinq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "c:\Users\zackh\Coding\crypto-sentiment-webapp\_Imports.razor"
using BlazorStrap;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "c:\Users\zackh\Coding\crypto-sentiment-webapp\Pages\Search.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "c:\Users\zackh\Coding\crypto-sentiment-webapp\Pages\Search.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "c:\Users\zackh\Coding\crypto-sentiment-webapp\Pages\Search.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "c:\Users\zackh\Coding\crypto-sentiment-webapp\Pages\Search.razor"
using crypto_sentiment.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:\Users\zackh\Coding\crypto-sentiment-webapp\Pages\Search.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "c:\Users\zackh\Coding\crypto-sentiment-webapp\Pages\Search.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "c:\Users\zackh\Coding\crypto-sentiment-webapp\Pages\Search.razor"
using crypto_sentiment.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/crypto/{searchTerm}")]
    public partial class Search : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 182 "c:\Users\zackh\Coding\crypto-sentiment-webapp\Pages\Search.razor"
       

    private List<CryptoData> searchList;
    string sentiment;
    CryptoData[] cryptoArray = new CryptoData[100];

    [Parameter]    
    public string searchTerm {get;set;}

    [Parameter]    
    public int timeSelect {get;set;} = 60;

    private string[] searchBarList = {};




    TimeSpan spanLastFifteen = TimeSpan.FromMinutes(5);
    TimeSpan spanLastHour = TimeSpan.FromMinutes(20);

    TimeSpan spanLastDay = TimeSpan.FromMinutes(480);


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Time before db call: "+DateTime.Now);
        using (var context = contextFactory.CreateDbContext())
        {
            searchList = context.Currencies.Where(b => b.slug.Equals(searchTerm) || b.symbol.Equals(searchTerm)).OrderByDescending(s => s.date).Take(12).ToList();
        }
        Console.WriteLine("Time after db call: "+DateTime.Now);
        Console.WriteLine("Time before twitter call: "+DateTime.Now);
        cryptoArray = searchList.ToArray();
        sentiment = await tweetAPIservice.getSenti(searchTerm);
        Console.WriteLine("Time after twitter call: "+DateTime.Now);

    }

    double stringToDouble(string str){
        return Convert.ToDouble(str);
    }

    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;

        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);

        return str.ToUpper();
    }

    string FormatAsUSD(object value)
    {
        return "$"+Math.Round((double)value,3).ToString();
    }

    //need to add dropdown to switch time and repopulate chart and dat



    
    async Task refreshPage(int timeSel)
    {
        timeSelect = timeSel;
        using (var context = contextFactory.CreateDbContext())
        {
            if (timeSelect == 15)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(4).ToListAsync();
            }
            else if (timeSelect == 60)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(13).ToListAsync();
            }
            else if (timeSelect == 1440)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(289).ToListAsync();
            }
        }
        cryptoArray = searchList.ToArray();
    }


    void SearchForCrypto()
    {
        NavigationManager.NavigateTo("/crypto/" + searchTerm, true);
        Console.WriteLine("Called func");
    }

    private async Task<IEnumerable<string>> SearchCryptoList(string value)
    {
         await Task.Delay(5);
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return searchBarList.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }




#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.EntityFrameworkCore.IDbContextFactory<CryptoDbContext> contextFactory { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TweetAPIService tweetAPIservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CryptoDbService cryptoDbService { get; set; }
    }
}
#pragma warning restore 1591
