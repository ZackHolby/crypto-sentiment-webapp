// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crypto_sentiment.Models;

namespace crypto_sentiment.Migrations
{
    [DbContext(typeof(CryptoDbContext))]
    [Migration("20210524175419_updated_migration")]
    partial class updated_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("crypto_sentiment.Models.CryptoData", b =>
                {
                    b.Property<string>("cryptoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("currPrice")
                        .HasColumnType("float");

                    b.Property<int>("currencyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<long>("market_cap")
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cryptoID");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            cryptoID = "d9ac68ab-7cbf-4ac3-8638-2a1474314a3a",
                            currPrice = 1000.0,
                            currencyID = 1,
                            date = new DateTime(2021, 5, 24, 13, 54, 18, 923, DateTimeKind.Local).AddTicks(4111),
                            market_cap = 10L,
                            slug = "Bitcoin",
                            symbol = "BTC"
                        },
                        new
                        {
                            cryptoID = "77e4a50f-f860-4293-93be-22ae6adb5814",
                            currPrice = 2000.0,
                            currencyID = 2,
                            date = new DateTime(2021, 5, 24, 13, 54, 18, 927, DateTimeKind.Local).AddTicks(448),
                            market_cap = 20L,
                            slug = "Ethereum",
                            symbol = "ETH"
                        },
                        new
                        {
                            cryptoID = "6267ae51-3776-4078-b322-934edae266e2",
                            currPrice = 3000.0,
                            currencyID = 3,
                            date = new DateTime(2021, 5, 24, 13, 54, 18, 927, DateTimeKind.Local).AddTicks(502),
                            market_cap = 30L,
                            slug = "Cardano",
                            symbol = "ADA"
                        },
                        new
                        {
                            cryptoID = "46c02d70-7f5f-48ea-8eb1-aa36f4043ed2",
                            currPrice = 4000.0,
                            currencyID = 4,
                            date = new DateTime(2021, 5, 24, 13, 54, 18, 927, DateTimeKind.Local).AddTicks(510),
                            market_cap = 40L,
                            slug = "Chainlink",
                            symbol = "LINK"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
