// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crypto_sentiment.Models;

namespace crypto_sentiment.Migrations
{
    [DbContext(typeof(CryptoDbContext))]
    [Migration("20210601193745_new_pc_migration")]
    partial class new_pc_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("crypto_sentiment.Models.CryptoData", b =>
                {
                    b.Property<string>("cryptoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("currPrice")
                        .HasColumnType("float");

                    b.Property<int>("currencyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<long>("market_cap")
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cryptoID");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            cryptoID = "6d28bdcb-87f7-475e-8755-2fe9521f457f",
                            currPrice = 1000.0,
                            currencyID = 1,
                            date = new DateTime(2021, 6, 1, 15, 37, 45, 299, DateTimeKind.Local).AddTicks(1692),
                            market_cap = 10L,
                            slug = "Bitcoin",
                            symbol = "BTC"
                        },
                        new
                        {
                            cryptoID = "c80c2e61-fd5d-4d0e-b7e8-21a1188e7d63",
                            currPrice = 2000.0,
                            currencyID = 2,
                            date = new DateTime(2021, 6, 1, 15, 37, 45, 300, DateTimeKind.Local).AddTicks(5095),
                            market_cap = 20L,
                            slug = "Ethereum",
                            symbol = "ETH"
                        },
                        new
                        {
                            cryptoID = "617ae0d7-976f-4750-989c-abf7c1c7a99e",
                            currPrice = 3000.0,
                            currencyID = 3,
                            date = new DateTime(2021, 6, 1, 15, 37, 45, 300, DateTimeKind.Local).AddTicks(5122),
                            market_cap = 30L,
                            slug = "Cardano",
                            symbol = "ADA"
                        },
                        new
                        {
                            cryptoID = "067572e3-dbfa-44f3-b552-297de9ec127b",
                            currPrice = 4000.0,
                            currencyID = 4,
                            date = new DateTime(2021, 6, 1, 15, 37, 45, 300, DateTimeKind.Local).AddTicks(5127),
                            market_cap = 40L,
                            slug = "Chainlink",
                            symbol = "LINK"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
