// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crypto_sentiment.Models;

namespace crypto_sentiment.Migrations
{
    [DbContext(typeof(CryptoDbContext))]
    [Migration("20210601195141_new_pc_initial_migration")]
    partial class new_pc_initial_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("crypto_sentiment.Models.CryptoData", b =>
                {
                    b.Property<string>("cryptoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("currPrice")
                        .HasColumnType("float");

                    b.Property<int>("currencyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<long>("market_cap")
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cryptoID");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            cryptoID = "beda3f8a-8a23-40f0-b8d9-4e616a90fad4",
                            currPrice = 1000.0,
                            currencyID = 1,
                            date = new DateTime(2021, 6, 1, 15, 51, 40, 949, DateTimeKind.Local).AddTicks(4255),
                            market_cap = 10L,
                            slug = "Bitcoin",
                            symbol = "BTC"
                        },
                        new
                        {
                            cryptoID = "a86ca76c-b2c0-4c8f-805c-411248879f4b",
                            currPrice = 2000.0,
                            currencyID = 2,
                            date = new DateTime(2021, 6, 1, 15, 51, 40, 950, DateTimeKind.Local).AddTicks(7290),
                            market_cap = 20L,
                            slug = "Ethereum",
                            symbol = "ETH"
                        },
                        new
                        {
                            cryptoID = "a857740d-c25b-4a92-8ab2-bc310213e3bf",
                            currPrice = 3000.0,
                            currencyID = 3,
                            date = new DateTime(2021, 6, 1, 15, 51, 40, 950, DateTimeKind.Local).AddTicks(7317),
                            market_cap = 30L,
                            slug = "Cardano",
                            symbol = "ADA"
                        },
                        new
                        {
                            cryptoID = "d5340578-6369-4e42-8eb0-6f4505d93622",
                            currPrice = 4000.0,
                            currencyID = 4,
                            date = new DateTime(2021, 6, 1, 15, 51, 40, 950, DateTimeKind.Local).AddTicks(7322),
                            market_cap = 40L,
                            slug = "Chainlink",
                            symbol = "LINK"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
