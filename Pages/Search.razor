@page "/crypto/{searchTerm}"


@using System.Globalization
@using Radzen
@using Radzen.Blazor
@using crypto_sentiment.Data
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@using crypto_sentiment.Models;
@inject CryptoDbService cryptoDbService
@inject TweetAPIService tweetAPIservice
@inject Microsoft.EntityFrameworkCore.IDbContextFactory<CryptoDbContext> contextFactory;
@inject NavigationManager NavigationManager
    


@if (searchList == null)
{
    <div class="spinner-border text-dark"></div>
}
else
{


    <div class="row">
        <div class="col-md-4 offset-md-4">
            <h1 style="text-align: center;">@searchTerm Chart</h1>
        </div>
        <div class="col-md-3 d-flex justify-content-center">
            <div class="dropdown">
                @if(timeSelect == 15){
                <button class="dropbtn">@timeSelect min</button>
                }
                else if(timeSelect == 60){
                <button class="dropbtn">1 hr</button>
                }
                else{
                <button class="dropbtn">24 hr</button>
                }
                <div class="dropdown-content">
                    <button @onclick="() => refreshPage(15)">15 m</button>
                    <button @onclick="() => refreshPage(60)">1 hr</button>
                    <button @onclick="() => refreshPage(1440)">24 hr</button>
                </div>
            </div>
        </div>
        
    </div>
    
    <div class="row">
        <div class="col-xl-10 offset-xl-1 col-lg-10 offset-lg-1 col-md-10 offset-md-1 col-sm-12 col-sm-offset-0">
            
            <RadzenChart>
                <RadzenLineSeries Data="@cryptoArray" CategoryProperty="date" Title="@searchTerm" ValueProperty="currPrice">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </RadzenLineSeries>
                @if(timeSelect == 15){
                    <RadzenCategoryAxis Padding="5" FormatString="{0:hh:mm tt}" Step=@spanLastFifteen> 
                        <RadzenAxisTitle Text="Time (UTC)" />
                    </RadzenCategoryAxis>
                }
                else if(timeSelect == 60){
                    <RadzenCategoryAxis Padding="5" FormatString="{0:hh:mm tt}" Step=@spanLastHour> 
                        <RadzenAxisTitle Text="Time (UTC)" />
                    </RadzenCategoryAxis>
                }
                else{
                    <RadzenCategoryAxis Padding="5" FormatString="{0:hh:mm tt}" Step=@spanLastDay> 
                        <RadzenAxisTitle Text="Time (UTC)" />
                    </RadzenCategoryAxis>
                }
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Current Price ($)" />
                </RadzenValueAxis>
            </RadzenChart>
            
        </div>
    </div>
    <br />
    <br />
    <br />
    <div class="row">
        <div class="col-lg-4 offset-lg-0 col-md-6 offset-md-0 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Bitcoin</h3>
            <br />
            <p>@cryptoArray[0].symbol</p>
        </div>
        <div class="col-lg-4 offset-lg-0 col-md-6 offset-md-0 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
                <h3>Current Price</h3>
                <br />
                <p>@Math.Round(cryptoArray[0].currPrice,2)</p>   
        </div>
        <div class="col-lg-4 offset-lg-0 col-md-6 offset-md-0 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Market Cap</h3>
            <br />
            <p>@cryptoArray[0].marketCap</p>
            
        </div>
        
        <div class="col-lg-6 offset-lg-0 col-md- offset-md-0 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Sentiment</h3>
            <br />
            <p>10</p>
        </div>
        <div class="col-lg-6 offset-lg-0 col-md-6 offset-md-0 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Last Updated</h3>
            <br />
            <p>@cryptoArray[0].date</p>
        </div>
    </div>
    <br />
    <br />
    <br />
    <br />

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>CryptoID</th>
                <th>Symbol</th>
                <th>Current Price</th>
                <th>Market Cap</th>
                <th>Slug</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cryptoData in searchList)
            {
                <tr>
                    <td>@cryptoData.date.ToShortDateString()</td>
                    <td>@cryptoData.cryptoID</td>
                    <td>@cryptoData.symbol</td>
                    <td>@cryptoData.currPrice</td>
                    <td>@cryptoData.marketCap</td>
                    <td>@cryptoData.slug</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<CryptoData> searchList;
    CryptoData[] cryptoArray = new CryptoData[100];

    [Parameter]    
    public string searchTerm {get;set;}

    [Parameter]    
    public int timeSelect {get;set;} = 60;



    TimeSpan spanLastFifteen = TimeSpan.FromMinutes(1);
    TimeSpan spanLastHour = TimeSpan.FromMinutes(10);

    TimeSpan spanLastDay = TimeSpan.FromMinutes(120);


    protected override async Task OnInitializedAsync()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(12).ToListAsync();
        }

        cryptoArray = searchList.ToArray();
        Console.WriteLine(cryptoArray[0].date.ToString("hh:mm:ss tt",CultureInfo.InvariantCulture));
        Console.WriteLine("Returned this many results from search: "+searchList.Count());

    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    //need to add dropdown to switch time and repopulate chart and data
    async Task refreshPage(int timeSel)
    {
        timeSelect = timeSel;
        using (var context = contextFactory.CreateDbContext())
        {
            if (timeSel == 15)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(4).ToListAsync();
            }
            else if (timeSel == 60)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(13).ToListAsync();
            }
            else if (timeSel == 1440)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(289).ToListAsync();
            }
        }
        cryptoArray = searchList.ToArray();
    }




}
