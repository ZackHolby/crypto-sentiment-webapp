@page "/crypto/{searchTerm}"


@using System.Globalization
@using Radzen
@using Radzen.Blazor
@using crypto_sentiment.Data
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@using crypto_sentiment.Models;
@inject CryptoDbService cryptoDbService
@inject TweetAPIService tweetAPIservice
@inject Microsoft.EntityFrameworkCore.IDbContextFactory<CryptoDbContext> contextFactory;
@inject NavigationManager NavigationManager

    


@if (searchList == null)
{
    <div class="center">
        <p>Loading your content...</p>
        <div class="spinner-border text-dark"></div>
    </div>
}
else if (cryptoArray.Length == 0)
{
    <h2>Crypto not found...</h2>
    <h2>search again!</h2>

    <div class="top-row px-4">
            <input type="text" @bind-value="@searchTerm" placeholder="Ex. Bitcoin, ETH..."/>
            <input type="button" value="Search" @onclick="() => SearchForCrypto()"/>
    </div>
}
else
{


    <div class="row">
        <div class="col-md-4 offset-md-4">
            <h1 style="text-align: center;">@FirstLetterToUpper(cryptoArray[0].slug)</h1>
        </div>
        <div class="col-md-3 d-flex justify-content-center">
            <div class="dropdown">
                @if(timeSelect == 15){
                <button class="dropbtn">@timeSelect min</button>
                }
                else if(timeSelect == 60){
                <button class="dropbtn">1 hr</button>
                }
                else{
                <button class="dropbtn">24 hr</button>
                }
                <div class="dropdown-content">
                    <button @onclick="() => refreshPage(15)">15 m</button>
                    <button @onclick="() => refreshPage(60)">1 hr</button>
                    <button @onclick="() => refreshPage(1440)">24 hr</button>
                </div>
            </div>
        </div>
        
    </div>
    
    <div class="row">
        <div class="col-xl-10 offset-xl-1 col-lg-10 offset-lg-1 col-md-10 offset-md-1 col-sm-12 col-sm-offset-0">
            
            <RadzenChart>
                <RadzenLineSeries Data="@cryptoArray" CategoryProperty="date" Title="@FirstLetterToUpper(searchTerm)" ValueProperty="currPrice">
                    
                </RadzenLineSeries>
                @if(timeSelect == 15){
                    <RadzenCategoryAxis Padding="5" FormatString="{0:hh:mm tt}" Step=@spanLastFifteen> 
                        <RadzenAxisTitle Text="Time (UTC)" />
                    </RadzenCategoryAxis>
                }
                else if(timeSelect == 60){
                    <RadzenCategoryAxis Padding="5" FormatString="{0:hh:mm tt}" Step=@spanLastHour> 
                        <RadzenAxisTitle Text="Time (UTC)" />
                    </RadzenCategoryAxis>
                }
                else{
                    <RadzenCategoryAxis Padding="5" FormatString="{0:hh:mm tt}" Step=@spanLastDay> 
                        <RadzenAxisTitle Text="Time (UTC)" />
                    </RadzenCategoryAxis>
                }

                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
            </RadzenChart>
            
        </div>
    </div>
    <br />
    <br />
    <br />
    <div class="row">
        <div class="col-lg-2 offset-lg-1 col-md-10 offset-md-1 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Cryptocurrency</h3>
            <p>@FirstLetterToUpper(cryptoArray[0].symbol)</p>
        </div>
        <div class="col-lg-2 offset-lg-0 col-md-10 offset-md-1 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Current Price</h3>

            <p>$@Convert.ToDecimal(Math.Round(cryptoArray[0].currPrice,2)).ToString("#,##0.00")</p>
            @if(percentChangeCurrPrice(cryptoArray) >= 0){
                <p style="color:green;">(@Math.Round(percentChangeCurrPrice(cryptoArray),2)%)</p>
            }else{
                <p style="color:red;">(@Math.Round(percentChangeCurrPrice(cryptoArray),2)%)</p>
            }
                   
        </div>
        <div class="col-lg-2 offset-lg-0 col-md-10 offset-md-1 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Market Cap</h3>
            <p>$@Convert.ToDecimal(cryptoArray[0].marketCap).ToString("#,##0.00")</p>
            
        </div>
        
        <div class="col-lg-2 offset-lg-0 col-md-10 offset-md-1 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Sentiment</h3>
            @if(stringToDouble(sentiment) >= 0){
                    <p style="color:green;">@Math.Round(stringToDouble(sentiment),3)%</p>
                }else{
                    <p style="color:red;">@Math.Round(stringToDouble(sentiment),3)%</p>
                }
        </div>
        <div class="col-lg-2 offset-lg-0 col-md-10 offset-md-1 col-sm-10 offset-sm-1 col-10 offset-1 text-center">
            <h3>Last Updated</h3>
            <p>@cryptoArray[0].date</p>
        </div>
    </div>
    <br />
    <br />
    <br />
    <br />

    <div class="tableContainer">
        <h2 style="text-align: center; text-decoration: underline; ">@FirstLetterToUpper(cryptoArray[0].slug.ToLower()) recent data pulls</h2> 
        <br />
        <table class="table">
            <thead>
                <tr>
                    <th>Date (UTC)</th>
                    <th>Symbol</th>
                    <th>Current Price</th>
                    <th>Market Cap</th>
                    <th>Slug</th>
                </tr>
            </thead>
            <tbody>

                @if(searchList.Count > 10){
                    @for (int x=0;x<10;x++)
                    {
                        <tr>
                            <td>@searchList[x].date.ToShortDateString() at @searchList[x].date.ToShortTimeString()</td>
                            <td>@searchList[x].symbol</td>
                            <td>$@Math.Round(searchList[x].currPrice,3)</td>
                            <td>$@searchList[x].marketCap</td>
                            <td>@searchList[x].slug</td>
                        </tr>
                    }
                }else{
                    @foreach (var cryptoData in searchList)
                    {
                        <tr>
                            <td>@cryptoData.date.ToShortDateString() at @cryptoData.date.ToShortTimeString()</td>
                            <td>@cryptoData.symbol</td>
                            <td>$@Math.Round(cryptoData.currPrice,2)</td>
                            <td>$@cryptoData.marketCap</td>
                            <td>@cryptoData.slug</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    
}

@code {

    private List<CryptoData> searchList;
    string sentiment;
    CryptoData[] cryptoArray = new CryptoData[100];

    [Parameter]    
    public string searchTerm {get;set;}

    [Parameter]    
    public int timeSelect {get;set;} = 60;



    TimeSpan spanLastFifteen = TimeSpan.FromMinutes(5);
    TimeSpan spanLastHour = TimeSpan.FromMinutes(20);

    TimeSpan spanLastDay = TimeSpan.FromMinutes(480);


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Time before db call: "+DateTime.Now);
        using (var context = contextFactory.CreateDbContext())
        {
            searchList = await context.Currencies.Where(b => b.slug.Equals(searchTerm)).OrderByDescending(s => s.date).Take(12).ToListAsync();
        }
        Console.WriteLine("Time after db call: "+DateTime.Now);
        Console.WriteLine("Time before twitter call: "+DateTime.Now);
        cryptoArray = searchList.ToArray();
        sentiment = await tweetAPIservice.getSenti(searchTerm);
        Console.WriteLine("Time after twitter call: "+DateTime.Now);

    }

    double stringToDouble(string str){
        return Convert.ToDouble(str);
    }

    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;

        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);

        return str.ToUpper();
    }

    string FormatAsUSD(object value)
    {
        return "$"+Math.Round((double)value,2).ToString();
    }

    //need to add dropdown to switch time and repopulate chart and data
    double percentChangeCurrPrice(CryptoData[] arr){
        int arrLen = arr.Length;
        double change = ((arr[0].currPrice - arr[arrLen - 1].currPrice)/arr[arrLen-1].currPrice)*100;
        return change;
    }



    
    async Task refreshPage(int timeSel)
    {
        timeSelect = timeSel;
        using (var context = contextFactory.CreateDbContext())
        {
            if (timeSelect == 15)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(4).ToListAsync();
            }
            else if (timeSelect == 60)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(13).ToListAsync();
            }
            else if (timeSelect == 1440)
            {
            searchList = await context.Currencies.Where(b => (b.symbol == searchTerm || b.slug == searchTerm)).OrderByDescending(s => s.date).Take(289).ToListAsync();
            }
        }
        cryptoArray = searchList.ToArray();
    }


    void SearchForCrypto()
    {
        NavigationManager.NavigateTo("/crypto/" + searchTerm, forceLoad: true);
        Console.WriteLine("Called func");
    }



}
